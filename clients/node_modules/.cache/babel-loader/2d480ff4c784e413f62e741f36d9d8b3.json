{"ast":null,"code":"import _slicedToArray from \"/home/rwasser/setjetters/setjettersGIS/clients/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/rwasser/setjetters/setjettersGIS/clients/src/components/Map/Layers/MovieSets.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Axios from \"axios\";\nimport { Marker, Popup } from 'react-leaflet';\nimport { setIcon } from './Icons';\nimport \"./Layers.css\";\nimport MarkerClusterGroup from 'react-leaflet-markercluster';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nrequire('react-leaflet-markercluster/dist/styles.min.css');\n\nfunction MovieSets() {\n  _s();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      movieLocationsList = _useState2[0],\n      setMovieLocations = _useState2[1];\n\n  useEffect(function () {\n    Axios.get('http://localhost:3001/api/get/locations').then(function (response) {\n      setMovieLocations(response.data);\n      console.log(response.data);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(MarkerClusterGroup, {\n    children: [\"movieLocationsList.map((val) => (\", /*#__PURE__*/_jsxDEV(Marker, {\n      icon: setIcon // key = {val.name} \n      ,\n      position: [val.lat, val.lng],\n      children: /*#__PURE__*/_jsxDEV(Popup, {\n        children: val.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this), \"))\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 7\n  }, this);\n}\n\n_s(MovieSets, \"PXihRy5LkafQ9uNSroqPixChtUQ=\");\n\n_c = MovieSets;\nexport default MovieSets;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieSets\");","map":{"version":3,"sources":["/home/rwasser/setjetters/setjettersGIS/clients/src/components/Map/Layers/MovieSets.js"],"names":["React","useState","useEffect","Axios","Marker","Popup","setIcon","MarkerClusterGroup","require","MovieSets","movieLocationsList","setMovieLocations","get","then","response","data","console","log","val","lat","lng","name"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,eAA9B;AACA,SAASC,OAAT,QAAwB,SAAxB;AACA,OAAO,cAAP;AACA,OAAOC,kBAAP,MAA+B,6BAA/B;;;AAEAC,OAAO,CAAC,iDAAD,CAAP;;AAGA,SAASC,SAAT,GAAqB;AAAA;;AACnB,kBAAgDR,QAAQ,CAAC,EAAD,CAAxD;AAAA;AAAA,MAAOS,kBAAP;AAAA,MAA2BC,iBAA3B;;AAEAT,EAAAA,SAAS,CAAC,YAAM;AACdC,IAAAA,KAAK,CAACS,GAAN,CAAU,yCAAV,EAAqDC,IAArD,CAA0D,UAACC,QAAD,EAAc;AACtEH,MAAAA,iBAAiB,CAACG,QAAQ,CAACC,IAAV,CAAjB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACC,IAArB;AACD,KAHD;AAID,GALQ,EAKN,EALM,CAAT;AAOA,sBACI,QAAC,kBAAD;AAAA,iEAEE,QAAC,MAAD;AAAQ,MAAA,IAAI,EAAET,OAAd,CACA;AADA;AAEA,MAAA,QAAQ,EAAI,CAACY,GAAG,CAACC,GAAL,EAAUD,GAAG,CAACE,GAAd,CAFZ;AAAA,6BAGE,QAAC,KAAD;AAAA,kBACGF,GAAG,CAACG;AADP;AAAA;AAAA;AAAA;AAAA;AAHF;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAcD;;GAxBQZ,S;;KAAAA,S;AA0BT,eAAeA,SAAf","sourcesContent":["import React, {useState, useEffect} from \"react\";\nimport Axios from \"axios\";\nimport { Marker, Popup } from 'react-leaflet';\nimport { setIcon } from './Icons';\nimport \"./Layers.css\"\nimport MarkerClusterGroup from 'react-leaflet-markercluster';\n\nrequire('react-leaflet-markercluster/dist/styles.min.css'); \n\n\nfunction MovieSets() {\n  const [movieLocationsList, setMovieLocations] = useState([]);\n\n  useEffect(() => {\n    Axios.get('http://localhost:3001/api/get/locations').then((response) => {\n      setMovieLocations(response.data);\n      console.log(response.data)\n    })\n  }, [])\n\n  return (\n      <MarkerClusterGroup>\n      movieLocationsList.map((val) => (\n        <Marker icon={setIcon}\n        // key = {val.name} \n        position = {[val.lat, val.lng]}>\n          <Popup>\n            {val.name}\n          </Popup>\n        </Marker>\n      ))\n      </MarkerClusterGroup>\n\n  );\n}\n\nexport default MovieSets;\n"]},"metadata":{},"sourceType":"module"}