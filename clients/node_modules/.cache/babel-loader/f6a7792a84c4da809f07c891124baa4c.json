{"ast":null,"code":"var osmtogeojson = require('osmtogeojson'),\n    querystring = require('querystring'),\n    request = require('request'),\n    concat = require('concat-stream'),\n    JSONStream = require('JSONStream'),\n    xmldom = require('xmldom');\n\nmodule.exports = function (query, cb, options) {\n  var contentType;\n  options = options || {};\n\n  var toGeoJSON = function toGeoJSON(data) {\n    var geojson;\n    geojson = osmtogeojson(data, {\n      flatProperties: options.flatProperties || false\n    });\n    cb(undefined, geojson);\n  };\n\n  var handleXml = function handleXml(data) {\n    var parser = new xmldom.DOMParser();\n    var doc = parser.parseFromString(data);\n    toGeoJSON(doc);\n  };\n\n  var reqOptions = {\n    headers: {\n      'content-type': 'application/x-www-form-urlencoded'\n    },\n    body: querystring.stringify({\n      data: query\n    })\n  };\n  var r;\n\n  if (!global.window) {\n    r = request.post(options.overpassUrl || 'https://overpass-api.de/api/interpreter', reqOptions);\n    r.on('response', function (response) {\n      if (response.statusCode != 200) {\n        r.abort();\n        return cb({\n          message: 'Request failed: HTTP ' + response.statusCode,\n          statusCode: response.statusCode\n        });\n      }\n\n      contentType = response.headers['content-type'];\n\n      if (contentType.indexOf('json') >= 0) {\n        r.pipe(JSONStream.parse()).on('data', toGeoJSON).on('error', cb);\n      } else if (contentType.indexOf('xml') >= 0) {\n        var body = '';\n        r.on('data', function (chunk) {\n          body += chunk;\n        }).on('end', function () {\n          handleXml(body);\n        });\n      } else {\n        cb({\n          message: 'Unknown Content-Type \"' + contentType + '\" in response'\n        });\n      }\n    }).on('error', cb);\n  } else {\n    r = request.post(options.overpassUrl || 'https://overpass-api.de/api/interpreter', reqOptions, function (error, response, body) {\n      if (!error && response.statusCode === 200) {\n        toGeoJSON(JSON.parse(body));\n      } else if (error) {\n        cb(error);\n      } else if (response) {\n        cb({\n          message: 'Request failed: HTTP ' + response.statusCode,\n          statusCode: response.statusCode\n        });\n      } else {\n        cb({\n          message: 'Unknown error.'\n        });\n      }\n    });\n  }\n\n  return r;\n};","map":{"version":3,"sources":["/home/rwasser/setjetters/setjettersGIS/clients/node_modules/query-overpass/index.js"],"names":["osmtogeojson","require","querystring","request","concat","JSONStream","xmldom","module","exports","query","cb","options","contentType","toGeoJSON","data","geojson","flatProperties","undefined","handleXml","parser","DOMParser","doc","parseFromString","reqOptions","headers","body","stringify","r","global","window","post","overpassUrl","on","response","statusCode","abort","message","indexOf","pipe","parse","chunk","error","JSON"],"mappings":"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","sourcesContent":["var osmtogeojson = require('osmtogeojson'),\n    querystring = require('querystring'),\n    request = require('request'),\n    concat = require('concat-stream'),\n    JSONStream = require('JSONStream'),\n    xmldom = require('xmldom')\n\nmodule.exports = function(query, cb, options) {\n    var contentType;\n    options = options || {};\n\n    var toGeoJSON = function(data) {\n        var geojson;\n\n        geojson = osmtogeojson(data, {\n            flatProperties: options.flatProperties || false\n        });\n        cb(undefined, geojson);\n    };\n\n    var handleXml = function (data) {\n        var parser = new xmldom.DOMParser();\n        var doc = parser.parseFromString(data);\n        toGeoJSON(doc);\n    }\n\n    var reqOptions = {\n        headers: {\n            'content-type': 'application/x-www-form-urlencoded'\n        },\n        body: querystring.stringify({ data: query })\n    };\n\n    var r;\n\n    if (!global.window) {\n        r = request.post(options.overpassUrl || 'https://overpass-api.de/api/interpreter', reqOptions);\n\n        r\n            .on('response', function(response) {\n                if (response.statusCode != 200) {\n                    r.abort();\n                    return cb({\n                        message: 'Request failed: HTTP ' + response.statusCode,\n                        statusCode: response.statusCode\n                    });\n                }\n                contentType = response.headers['content-type'];\n\n                if (contentType.indexOf('json') >= 0) {\n                    r.pipe(JSONStream.parse())\n                        .on('data', toGeoJSON)\n                        .on('error', cb);\n                } else if (contentType.indexOf('xml') >= 0) {\n                    var body = '';\n                    r.on('data', function (chunk) { body += chunk; })\n                        .on('end', function() { handleXml(body); });\n                } else {\n                    cb({\n                        message: 'Unknown Content-Type \"' + contentType + '\" in response'\n                    });\n                }\n            })\n            .on('error', cb);\n    } else {\n        r = request.post(options.overpassUrl || 'https://overpass-api.de/api/interpreter', reqOptions, \n            function (error, response, body) {\n                if (!error && response.statusCode === 200) {\n                    toGeoJSON(JSON.parse(body));\n                } else if (error) {\n                    cb(error);\n                } else if (response) {\n                    cb({\n                        message: 'Request failed: HTTP ' + response.statusCode,\n                        statusCode: response.statusCode\n                    });\n                } else {\n                    cb({\n                        message: 'Unknown error.',\n                    });\n                }\n            });\n    }\n\n    return r;\n};\n"]},"metadata":{},"sourceType":"script"}