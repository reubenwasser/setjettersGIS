{"ast":null,"code":"var _ = require(\"./lodash.custom.js\");\n\nvar rewind = require(\"geojson-rewind\"); // see https://wiki.openstreetmap.org/wiki/Overpass_turbo/Polygon_Features\n\n\nvar polygonFeatures = {};\n\nrequire(\"osm-polygon-features\").forEach(function (tags) {\n  if (tags.polygon === \"all\") polygonFeatures[tags.key] = true;else {\n    var list = tags.polygon === \"whitelist\" ? \"included_values\" : \"excluded_values\",\n        tagValuesObj = {};\n    tags.values.forEach(function (value) {\n      tagValuesObj[value] = true;\n    });\n    polygonFeatures[tags.key] = {};\n    polygonFeatures[tags.key][list] = tagValuesObj;\n  }\n});\n\nvar osmtogeojson = {};\n\nosmtogeojson = function osmtogeojson(data, options) {\n  options = _.merge({\n    verbose: false,\n    flatProperties: false,\n    uninterestingTags: {\n      \"source\": true,\n      \"source_ref\": true,\n      \"source:ref\": true,\n      \"history\": true,\n      \"attribution\": true,\n      \"created_by\": true,\n      \"tiger:county\": true,\n      \"tiger:tlid\": true,\n      \"tiger:upload_uuid\": true\n    },\n    polygonFeatures: polygonFeatures\n  }, options);\n  var result;\n  if (typeof XMLDocument !== \"undefined\" && data instanceof XMLDocument || typeof XMLDocument === \"undefined\" && data.childNodes) result = _osmXML2geoJSON(data);else result = _overpassJSON2geoJSON(data);\n  return result;\n\n  function _overpassJSON2geoJSON(json) {\n    // sort elements\n    var nodes = new Array();\n    var ways = new Array();\n    var rels = new Array(); // helper functions\n\n    function centerGeometry(object) {\n      var pseudoNode = _.clone(object);\n\n      pseudoNode.lat = object.center.lat;\n      pseudoNode.lon = object.center.lon;\n      pseudoNode.__is_center_placeholder = true;\n      nodes.push(pseudoNode);\n    }\n\n    function boundsGeometry(object) {\n      var pseudoWay = _.clone(object);\n\n      pseudoWay.nodes = [];\n\n      function addPseudoNode(lat, lon, i) {\n        var pseudoNode = {\n          type: \"node\",\n          id: \"_\" + pseudoWay.type + \"/\" + pseudoWay.id + \"bounds\" + i,\n          lat: lat,\n          lon: lon\n        };\n        pseudoWay.nodes.push(pseudoNode.id);\n        nodes.push(pseudoNode);\n      }\n\n      addPseudoNode(pseudoWay.bounds.minlat, pseudoWay.bounds.minlon, 1);\n      addPseudoNode(pseudoWay.bounds.maxlat, pseudoWay.bounds.minlon, 2);\n      addPseudoNode(pseudoWay.bounds.maxlat, pseudoWay.bounds.maxlon, 3);\n      addPseudoNode(pseudoWay.bounds.minlat, pseudoWay.bounds.maxlon, 4);\n      pseudoWay.nodes.push(pseudoWay.nodes[0]);\n      pseudoWay.__is_bounds_placeholder = true;\n      ways.push(pseudoWay);\n    }\n\n    function fullGeometryWay(way) {\n      function addFullGeometryNode(lat, lon, id) {\n        var geometryNode = {\n          type: \"node\",\n          id: id,\n          lat: lat,\n          lon: lon,\n          __is_uninteresting: true\n        };\n        nodes.push(geometryNode);\n      }\n\n      if (!_.isArray(way.nodes)) {\n        way.nodes = way.geometry.map(function (nd) {\n          if (nd !== null) // have to skip ref-less nodes\n            return \"_anonymous@\" + nd.lat + \"/\" + nd.lon;else return \"_anonymous@unknown_location\";\n        });\n      }\n\n      way.geometry.forEach(function (nd, i) {\n        if (nd) {\n          addFullGeometryNode(nd.lat, nd.lon, way.nodes[i]);\n        }\n      });\n    }\n\n    function fullGeometryRelation(rel) {\n      function addFullGeometryNode(lat, lon, id) {\n        var geometryNode = {\n          type: \"node\",\n          id: id,\n          lat: lat,\n          lon: lon\n        };\n        nodes.push(geometryNode);\n      }\n\n      function addFullGeometryWay(geometry, id) {\n        // shared multipolygon ways cannot be defined multiple times with the same id.\n        if (ways.some(function (way) {\n          // todo: this is slow :(\n          return way.type == \"way\" && way.id == id;\n        })) return;\n        var geometryWay = {\n          type: \"way\",\n          id: id,\n          nodes: []\n        };\n\n        function addFullGeometryWayPseudoNode(lat, lon) {\n          // todo? do not save the same pseudo node multiple times\n          var geometryPseudoNode = {\n            type: \"node\",\n            id: \"_anonymous@\" + lat + \"/\" + lon,\n            lat: lat,\n            lon: lon,\n            __is_uninteresting: true\n          };\n          geometryWay.nodes.push(geometryPseudoNode.id);\n          nodes.push(geometryPseudoNode);\n        }\n\n        geometry.forEach(function (nd) {\n          if (nd) {\n            addFullGeometryWayPseudoNode(nd.lat, nd.lon);\n          } else {\n            geometryWay.nodes.push(undefined);\n          }\n        });\n        ways.push(geometryWay);\n      }\n\n      rel.members.forEach(function (member, i) {\n        if (member.type == \"node\") {\n          if (member.lat) {\n            addFullGeometryNode(member.lat, member.lon, member.ref);\n          }\n        } else if (member.type == \"way\") {\n          if (member.geometry) {\n            member.ref = \"_fullGeom\" + member.ref;\n            addFullGeometryWay(member.geometry, member.ref);\n          }\n        }\n      });\n    } // create copies of individual json objects to make sure the original data doesn't get altered\n    // todo: cloning is slow: see if this can be done differently!\n\n\n    for (var i = 0; i < json.elements.length; i++) {\n      switch (json.elements[i].type) {\n        case \"node\":\n          var node = json.elements[i];\n          nodes.push(node);\n          break;\n\n        case \"way\":\n          var way = _.clone(json.elements[i]);\n\n          way.nodes = _.clone(way.nodes);\n          ways.push(way);\n          if (way.center) centerGeometry(way);\n          if (way.geometry) fullGeometryWay(way);else if (way.bounds) boundsGeometry(way);\n          break;\n\n        case \"relation\":\n          var rel = _.clone(json.elements[i]);\n\n          rel.members = _.clone(rel.members);\n          rels.push(rel);\n          var has_full_geometry = rel.members && rel.members.some(function (member) {\n            return member.type == \"node\" && member.lat || member.type == \"way\" && member.geometry && member.geometry.length > 0;\n          });\n          if (rel.center) centerGeometry(rel);\n          if (has_full_geometry) fullGeometryRelation(rel);else if (rel.bounds) boundsGeometry(rel);\n          break;\n\n        default: // type=area (from coord-query) is an example for this case.\n\n      }\n    }\n\n    return _convert2geoJSON(nodes, ways, rels);\n  }\n\n  function _osmXML2geoJSON(xml) {\n    // sort elements\n    var nodes = new Array();\n    var ways = new Array();\n    var rels = new Array(); // helper function\n\n    function copy_attribute(x, o, attr) {\n      if (x.hasAttribute(attr)) o[attr] = x.getAttribute(attr);\n    }\n\n    function centerGeometry(object, centroid) {\n      var pseudoNode = _.clone(object);\n\n      copy_attribute(centroid, pseudoNode, 'lat');\n      copy_attribute(centroid, pseudoNode, 'lon');\n      pseudoNode.__is_center_placeholder = true;\n      nodes.push(pseudoNode);\n    }\n\n    function boundsGeometry(object, bounds) {\n      var pseudoWay = _.clone(object);\n\n      pseudoWay.nodes = [];\n\n      function addPseudoNode(lat, lon, i) {\n        var pseudoNode = {\n          type: \"node\",\n          id: \"_\" + pseudoWay.type + \"/\" + pseudoWay.id + \"bounds\" + i,\n          lat: lat,\n          lon: lon\n        };\n        pseudoWay.nodes.push(pseudoNode.id);\n        nodes.push(pseudoNode);\n      }\n\n      addPseudoNode(bounds.getAttribute('minlat'), bounds.getAttribute('minlon'), 1);\n      addPseudoNode(bounds.getAttribute('maxlat'), bounds.getAttribute('minlon'), 2);\n      addPseudoNode(bounds.getAttribute('maxlat'), bounds.getAttribute('maxlon'), 3);\n      addPseudoNode(bounds.getAttribute('minlat'), bounds.getAttribute('maxlon'), 4);\n      pseudoWay.nodes.push(pseudoWay.nodes[0]);\n      pseudoWay.__is_bounds_placeholder = true;\n      ways.push(pseudoWay);\n    }\n\n    function fullGeometryWay(way, nds) {\n      function addFullGeometryNode(lat, lon, id) {\n        var geometryNode = {\n          type: \"node\",\n          id: id,\n          lat: lat,\n          lon: lon,\n          __is_uninteresting: true\n        };\n        nodes.push(geometryNode);\n        return geometryNode.id;\n      }\n\n      if (!_.isArray(way.nodes)) {\n        way.nodes = [];\n\n        _.each(nds, function (nd, i) {\n          way.nodes.push(\"_anonymous@\" + nd.getAttribute('lat') + \"/\" + nd.getAttribute('lon'));\n        });\n      }\n\n      _.each(nds, function (nd, i) {\n        if (nd.getAttribute('lat')) {\n          addFullGeometryNode(nd.getAttribute('lat'), nd.getAttribute('lon'), way.nodes[i]);\n        }\n      });\n    }\n\n    function fullGeometryRelation(rel, members) {\n      function addFullGeometryNode(lat, lon, id) {\n        var geometryNode = {\n          type: \"node\",\n          id: id,\n          lat: lat,\n          lon: lon\n        };\n        nodes.push(geometryNode);\n      }\n\n      function addFullGeometryWay(nds, id) {\n        // shared multipolygon ways cannot be defined multiple times with the same id.\n        if (ways.some(function (way) {\n          // todo: this is slow :(\n          return way.type == \"way\" && way.id == id;\n        })) return;\n        var geometryWay = {\n          type: \"way\",\n          id: id,\n          nodes: []\n        };\n\n        function addFullGeometryWayPseudoNode(lat, lon) {\n          // todo? do not save the same pseudo node multiple times\n          var geometryPseudoNode = {\n            type: \"node\",\n            id: \"_anonymous@\" + lat + \"/\" + lon,\n            lat: lat,\n            lon: lon,\n            __is_uninteresting: true\n          };\n          geometryWay.nodes.push(geometryPseudoNode.id);\n          nodes.push(geometryPseudoNode);\n        }\n\n        _.each(nds, function (nd) {\n          if (nd.getAttribute('lat')) {\n            addFullGeometryWayPseudoNode(nd.getAttribute('lat'), nd.getAttribute('lon'));\n          } else {\n            geometryWay.nodes.push(undefined);\n          }\n        });\n\n        ways.push(geometryWay);\n      }\n\n      _.each(members, function (member, i) {\n        if (rel.members[i].type == \"node\") {\n          if (member.getAttribute('lat')) {\n            addFullGeometryNode(member.getAttribute('lat'), member.getAttribute('lon'), rel.members[i].ref);\n          }\n        } else if (rel.members[i].type == \"way\") {\n          if (member.getElementsByTagName('nd').length > 0) {\n            rel.members[i].ref = \"_fullGeom\" + rel.members[i].ref;\n            addFullGeometryWay(member.getElementsByTagName('nd'), rel.members[i].ref);\n          }\n        }\n      });\n    } // nodes\n\n\n    _.each(xml.getElementsByTagName('node'), function (node, i) {\n      var tags = {};\n\n      _.each(node.getElementsByTagName('tag'), function (tag) {\n        tags[tag.getAttribute('k')] = tag.getAttribute('v');\n      });\n\n      var nodeObject = {\n        'type': 'node'\n      };\n      copy_attribute(node, nodeObject, 'id');\n      copy_attribute(node, nodeObject, 'lat');\n      copy_attribute(node, nodeObject, 'lon');\n      copy_attribute(node, nodeObject, 'version');\n      copy_attribute(node, nodeObject, 'timestamp');\n      copy_attribute(node, nodeObject, 'changeset');\n      copy_attribute(node, nodeObject, 'uid');\n      copy_attribute(node, nodeObject, 'user');\n      if (!_.isEmpty(tags)) nodeObject.tags = tags;\n      nodes.push(nodeObject);\n    }); // ways\n\n\n    var centroid, bounds;\n\n    _.each(xml.getElementsByTagName('way'), function (way, i) {\n      var tags = {};\n      var wnodes = [];\n\n      _.each(way.getElementsByTagName('tag'), function (tag) {\n        tags[tag.getAttribute('k')] = tag.getAttribute('v');\n      });\n\n      var has_full_geometry = false;\n\n      _.each(way.getElementsByTagName('nd'), function (nd, i) {\n        var id;\n        if (id = nd.getAttribute('ref')) wnodes[i] = id;\n        if (!has_full_geometry && nd.getAttribute('lat')) has_full_geometry = true;\n      });\n\n      var wayObject = {\n        \"type\": \"way\"\n      };\n      copy_attribute(way, wayObject, 'id');\n      copy_attribute(way, wayObject, 'version');\n      copy_attribute(way, wayObject, 'timestamp');\n      copy_attribute(way, wayObject, 'changeset');\n      copy_attribute(way, wayObject, 'uid');\n      copy_attribute(way, wayObject, 'user');\n      if (wnodes.length > 0) wayObject.nodes = wnodes;\n      if (!_.isEmpty(tags)) wayObject.tags = tags;\n      if (centroid = way.getElementsByTagName('center')[0]) centerGeometry(wayObject, centroid);\n      if (has_full_geometry) fullGeometryWay(wayObject, way.getElementsByTagName('nd'));else if (bounds = way.getElementsByTagName('bounds')[0]) boundsGeometry(wayObject, bounds);\n      ways.push(wayObject);\n    }); // relations\n\n\n    _.each(xml.getElementsByTagName('relation'), function (relation, i) {\n      var tags = {};\n      var members = [];\n\n      _.each(relation.getElementsByTagName('tag'), function (tag) {\n        tags[tag.getAttribute('k')] = tag.getAttribute('v');\n      });\n\n      var has_full_geometry = false;\n\n      _.each(relation.getElementsByTagName('member'), function (member, i) {\n        members[i] = {};\n        copy_attribute(member, members[i], 'ref');\n        copy_attribute(member, members[i], 'role');\n        copy_attribute(member, members[i], 'type');\n        if (!has_full_geometry && members[i].type == 'node' && member.getAttribute('lat') || members[i].type == 'way' && member.getElementsByTagName('nd').length > 0) has_full_geometry = true;\n      });\n\n      var relObject = {\n        \"type\": \"relation\"\n      };\n      copy_attribute(relation, relObject, 'id');\n      copy_attribute(relation, relObject, 'version');\n      copy_attribute(relation, relObject, 'timestamp');\n      copy_attribute(relation, relObject, 'changeset');\n      copy_attribute(relation, relObject, 'uid');\n      copy_attribute(relation, relObject, 'user');\n      if (members.length > 0) relObject.members = members;\n      if (!_.isEmpty(tags)) relObject.tags = tags;\n      if (centroid = relation.getElementsByTagName('center')[0]) centerGeometry(relObject, centroid);\n      if (has_full_geometry) fullGeometryRelation(relObject, relation.getElementsByTagName('member'));else if (bounds = relation.getElementsByTagName('bounds')[0]) boundsGeometry(relObject, bounds);\n      rels.push(relObject);\n    });\n\n    return _convert2geoJSON(nodes, ways, rels);\n  }\n\n  function _convert2geoJSON(nodes, ways, rels) {\n    // helper function that checks if there are any tags other than \"created_by\", \"source\", etc. or any tag provided in ignore_tags\n    function has_interesting_tags(t, ignore_tags) {\n      if (typeof ignore_tags !== \"object\") ignore_tags = {};\n      if (typeof options.uninterestingTags === \"function\") return !options.uninterestingTags(t, ignore_tags);\n\n      for (var k in t) {\n        if (!(options.uninterestingTags[k] === true) && !(ignore_tags[k] === true || ignore_tags[k] === t[k])) return true;\n      }\n\n      return false;\n    }\n\n    ; // helper function to extract meta information\n\n    function build_meta_information(object) {\n      var res = {\n        \"timestamp\": object.timestamp,\n        \"version\": object.version,\n        \"changeset\": object.changeset,\n        \"user\": object.user,\n        \"uid\": object.uid\n      };\n\n      for (var k in res) {\n        if (res[k] === undefined) delete res[k];\n      }\n\n      return res;\n    } // some data processing (e.g. filter nodes only used for ways)\n\n\n    var nodeids = new Object();\n\n    for (var i = 0; i < nodes.length; i++) {\n      if (nodes[i].lat === undefined) {\n        if (options.verbose) console.warn('Node', nodes[i].type + '/' + nodes[i].id, 'ignored because it has no coordinates');\n        continue; // ignore nodes without coordinates (e.g. returned by an ids_only query)\n      }\n\n      nodeids[nodes[i].id] = nodes[i];\n    }\n\n    var poinids = new Object();\n\n    for (var i = 0; i < nodes.length; i++) {\n      if (typeof nodes[i].tags != 'undefined' && has_interesting_tags(nodes[i].tags)) // this checks if the node has any tags other than \"created_by\"\n        poinids[nodes[i].id] = true;\n    }\n\n    for (var i = 0; i < rels.length; i++) {\n      if (!_.isArray(rels[i].members)) {\n        if (options.verbose) console.warn('Relation', rels[i].type + '/' + rels[i].id, 'ignored because it has no members');\n        continue; // ignore relations without members (e.g. returned by an ids_only query)\n      }\n\n      for (var j = 0; j < rels[i].members.length; j++) {\n        if (rels[i].members[j].type == \"node\") poinids[rels[i].members[j].ref] = true;\n      }\n    }\n\n    var wayids = new Object();\n    var waynids = new Object();\n\n    for (var i = 0; i < ways.length; i++) {\n      if (!_.isArray(ways[i].nodes)) {\n        if (options.verbose) console.warn('Way', ways[i].type + '/' + ways[i].id, 'ignored because it has no nodes');\n        continue; // ignore ways without nodes (e.g. returned by an ids_only query)\n      }\n\n      wayids[ways[i].id] = ways[i];\n\n      for (var j = 0; j < ways[i].nodes.length; j++) {\n        waynids[ways[i].nodes[j]] = true;\n        ways[i].nodes[j] = nodeids[ways[i].nodes[j]];\n      }\n    }\n\n    var pois = new Array();\n\n    for (var i = 0; i < nodes.length; i++) {\n      if ((!waynids[nodes[i].id] || poinids[nodes[i].id]) && !nodes[i].__is_uninteresting) pois.push(nodes[i]);\n    }\n\n    var relids = new Array();\n\n    for (var i = 0; i < rels.length; i++) {\n      if (!_.isArray(rels[i].members)) {\n        if (options.verbose) console.warn('Relation', rels[i].type + '/' + rels[i].id, 'ignored because it has no members');\n        continue; // ignore relations without members (e.g. returned by an ids_only query)\n      }\n\n      relids[rels[i].id] = rels[i];\n    }\n\n    var relsmap = {\n      node: {},\n      way: {},\n      relation: {}\n    };\n\n    for (var i = 0; i < rels.length; i++) {\n      if (!_.isArray(rels[i].members)) {\n        if (options.verbose) console.warn('Relation', rels[i].type + '/' + rels[i].id, 'ignored because it has no members');\n        continue; // ignore relations without members (e.g. returned by an ids_only query)\n      }\n\n      for (var j = 0; j < rels[i].members.length; j++) {\n        var m_type = rels[i].members[j].type;\n        var m_ref = rels[i].members[j].ref;\n\n        if (typeof m_ref !== \"number\") {\n          // de-namespace full geometry content\n          m_ref = m_ref.replace(\"_fullGeom\", \"\");\n        }\n\n        if (!relsmap[m_type]) {\n          if (options.verbose) console.warn('Relation', rels[i].type + '/' + rels[i].id, 'member', m_type + '/' + m_ref, 'ignored because it has an invalid type');\n          continue;\n        }\n\n        if (typeof relsmap[m_type][m_ref] === \"undefined\") relsmap[m_type][m_ref] = [];\n        relsmap[m_type][m_ref].push({\n          \"role\": rels[i].members[j].role,\n          \"rel\": rels[i].id,\n          \"reltags\": rels[i].tags\n        });\n      }\n    } // construct geojson\n\n\n    var geojson;\n    var geojsonnodes = {\n      \"type\": \"FeatureCollection\",\n      \"features\": new Array()\n    };\n\n    for (i = 0; i < pois.length; i++) {\n      if (typeof pois[i].lon == \"undefined\" || typeof pois[i].lat == \"undefined\") {\n        if (options.verbose) console.warn('POI', pois[i].type + '/' + pois[i].id, 'ignored because it lacks coordinates');\n        continue; // lon and lat are required for showing a point\n      }\n\n      var feature = {\n        \"type\": \"Feature\",\n        \"id\": pois[i].type + \"/\" + pois[i].id,\n        \"properties\": {\n          \"type\": pois[i].type,\n          \"id\": pois[i].id,\n          \"tags\": pois[i].tags || {},\n          \"relations\": relsmap[\"node\"][pois[i].id] || [],\n          \"meta\": build_meta_information(pois[i])\n        },\n        \"geometry\": {\n          \"type\": \"Point\",\n          \"coordinates\": [+pois[i].lon, +pois[i].lat]\n        }\n      };\n      if (pois[i].__is_center_placeholder) feature.properties[\"geometry\"] = \"center\";\n      geojsonnodes.features.push(feature);\n    }\n\n    var geojsonlines = {\n      \"type\": \"FeatureCollection\",\n      \"features\": new Array()\n    };\n    var geojsonpolygons = {\n      \"type\": \"FeatureCollection\",\n      \"features\": new Array()\n    }; // process multipolygons\n\n    for (var i = 0; i < rels.length; i++) {\n      if (typeof rels[i].tags != \"undefined\" && (rels[i].tags[\"type\"] == \"multipolygon\" || rels[i].tags[\"type\"] == \"boundary\")) {\n        var construct_multipolygon = function construct_multipolygon(tag_object, rel) {\n          var is_tainted = false;\n          var mp_geometry = simple_mp ? 'way' : 'relation',\n              mp_id = typeof tag_object.id === \"number\" ? tag_object.id : +tag_object.id.replace(\"_fullGeom\", \"\"); // prepare mp members\n\n          var members;\n          members = rel.members.filter(function (m) {\n            return m.type === \"way\";\n          });\n          members = members.map(function (m) {\n            var way = wayids[m.ref];\n\n            if (way === undefined) {\n              // check for missing ways\n              if (options.verbose) console.warn('Multipolygon', mp_geometry + '/' + mp_id, 'tainted by a missing way', m.type + '/' + m.ref);\n              is_tainted = true;\n              return;\n            }\n\n            return {\n              // TODO: this is slow! :(\n              id: m.ref,\n              role: m.role || \"outer\",\n              way: way,\n              nodes: way.nodes.filter(function (n) {\n                if (n !== undefined) return true;\n                is_tainted = true;\n                if (options.verbose) console.warn('Multipolygon', mp_geometry + '/' + mp_id, 'tainted by a way', m.type + '/' + m.ref, 'with a missing node');\n                return false;\n              })\n            };\n          });\n          members = _.compact(members); // construct outer and inner rings\n\n          var outers, inners;\n\n          function join(ways) {\n            var _first = function _first(arr) {\n              return arr[0];\n            };\n\n            var _last = function _last(arr) {\n              return arr[arr.length - 1];\n            }; // stolen from iD/relation.js\n\n\n            var joined = [],\n                current,\n                first,\n                last,\n                i,\n                how,\n                what;\n\n            while (ways.length) {\n              current = ways.pop().nodes.slice();\n              joined.push(current);\n\n              while (ways.length && _first(current) !== _last(current)) {\n                first = _first(current);\n                last = _last(current);\n\n                for (i = 0; i < ways.length; i++) {\n                  what = ways[i].nodes;\n\n                  if (last === _first(what)) {\n                    how = current.push;\n                    what = what.slice(1);\n                    break;\n                  } else if (last === _last(what)) {\n                    how = current.push;\n                    what = what.slice(0, -1).reverse();\n                    break;\n                  } else if (first == _last(what)) {\n                    how = current.unshift;\n                    what = what.slice(0, -1);\n                    break;\n                  } else if (first == _first(what)) {\n                    how = current.unshift;\n                    what = what.slice(1).reverse();\n                    break;\n                  } else {\n                    what = how = null;\n                  }\n                }\n\n                if (!what) {\n                  if (options.verbose) console.warn('Multipolygon', mp_geometry + '/' + mp_id, 'contains unclosed ring geometry');\n                  break; // Invalid geometry (dangling way, unclosed ring)\n                }\n\n                ways.splice(i, 1);\n                how.apply(current, what);\n              }\n            }\n\n            return joined;\n          }\n\n          outers = join(members.filter(function (m) {\n            return m.role === \"outer\";\n          }));\n          inners = join(members.filter(function (m) {\n            return m.role === \"inner\";\n          })); // sort rings\n\n          var mp;\n\n          function findOuter(inner) {\n            var polygonIntersectsPolygon = function polygonIntersectsPolygon(outer, inner) {\n              for (var i = 0; i < inner.length; i++) {\n                if (pointInPolygon(inner[i], outer)) return true;\n              }\n\n              return false;\n            };\n\n            var mapCoordinates = function mapCoordinates(from) {\n              return from.map(function (n) {\n                return [+n.lat, +n.lon];\n              });\n            }; // stolen from iD/geo.js,\n            // based on https://github.com/substack/point-in-polygon,\n            // ray-casting algorithm based on http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n\n\n            var pointInPolygon = function pointInPolygon(point, polygon) {\n              var x = point[0],\n                  y = point[1],\n                  inside = false;\n\n              for (var i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n                var xi = polygon[i][0],\n                    yi = polygon[i][1];\n                var xj = polygon[j][0],\n                    yj = polygon[j][1];\n                var intersect = yi > y != yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;\n                if (intersect) inside = !inside;\n              }\n\n              return inside;\n            }; // stolen from iD/relation.js\n\n\n            var o, outer; // todo: all this coordinate mapping makes this unneccesarily slow.\n            // see the \"todo: this is slow! :(\" above.\n\n            inner = mapCoordinates(inner);\n            /*for (o = 0; o < outers.length; o++) {\n              outer = mapCoordinates(outers[o]);\n              if (polygonContainsPolygon(outer, inner))\n                return o;\n            }*/\n\n            for (o = 0; o < outers.length; o++) {\n              outer = mapCoordinates(outers[o]);\n              if (polygonIntersectsPolygon(outer, inner)) return o;\n            }\n          }\n\n          mp = outers.map(function (o) {\n            return [o];\n          });\n\n          for (var j = 0; j < inners.length; j++) {\n            var o = findOuter(inners[j]);\n            if (o !== undefined) mp[o].push(inners[j]);else if (options.verbose) console.warn('Multipolygon', mp_geometry + '/' + mp_id, 'contains an inner ring with no containing outer'); // so, no outer ring for this inner ring is found.\n            // We're going to ignore holes in empty space.\n\n            ;\n          } // sanitize mp-coordinates (remove empty clusters or rings, {lat,lon,...} to [lon,lat]\n\n\n          var mp_coords = [];\n          mp_coords = _.compact(mp.map(function (cluster) {\n            var cl = _.compact(cluster.map(function (ring) {\n              if (ring.length < 4) {\n                // todo: is this correct: ring.length < 4 ?\n                if (options.verbose) console.warn('Multipolygon', mp_geometry + '/' + mp_id, 'contains a ring with less than four nodes');\n                return;\n              }\n\n              return _.compact(ring.map(function (node) {\n                return [+node.lon, +node.lat];\n              }));\n            }));\n\n            if (cl.length == 0) {\n              if (options.verbose) console.warn('Multipolygon', mp_geometry + '/' + mp_id, 'contains an empty ring cluster');\n              return;\n            }\n\n            return cl;\n          }));\n\n          if (mp_coords.length == 0) {\n            if (options.verbose) console.warn('Multipolygon', mp_geometry + '/' + mp_id, 'contains no coordinates');\n            return false; // ignore multipolygons without coordinates\n          }\n\n          var mp_type = \"MultiPolygon\";\n\n          if (mp_coords.length === 1) {\n            mp_type = \"Polygon\";\n            mp_coords = mp_coords[0];\n          } // mp parsed, now construct the geoJSON\n\n\n          var feature = {\n            \"type\": \"Feature\",\n            \"id\": tag_object.type + \"/\" + mp_id,\n            \"properties\": {\n              \"type\": tag_object.type,\n              \"id\": mp_id,\n              \"tags\": tag_object.tags || {},\n              \"relations\": relsmap[tag_object.type][tag_object.id] || [],\n              \"meta\": build_meta_information(tag_object)\n            },\n            \"geometry\": {\n              \"type\": mp_type,\n              \"coordinates\": mp_coords\n            }\n          };\n\n          if (is_tainted) {\n            if (options.verbose) console.warn('Multipolygon', mp_geometry + '/' + mp_id, 'is tainted');\n            feature.properties[\"tainted\"] = true;\n          }\n\n          return feature;\n        };\n\n        if (!_.isArray(rels[i].members)) {\n          if (options.verbose) console.warn('Multipolygon', rels[i].type + '/' + rels[i].id, 'ignored because it has no members');\n          continue; // ignore relations without members (e.g. returned by an ids_only query)\n        }\n\n        var outer_count = 0;\n\n        for (var j = 0; j < rels[i].members.length; j++) {\n          if (rels[i].members[j].role == \"outer\") outer_count++;else if (options.verbose && rels[i].members[j].role != \"inner\") console.warn('Multipolygon', rels[i].type + '/' + rels[i].id, 'member', rels[i].members[j].type + '/' + rels[i].members[j].ref, 'ignored because it has an invalid role: \"' + rels[i].members[j].role + '\"');\n        }\n\n        rels[i].members.forEach(function (m) {\n          if (wayids[m.ref]) {\n            // this even works in the following corner case:\n            // a multipolygon amenity=xxx with outer line tagged amenity=yyy\n            // see https://github.com/tyrasd/osmtogeojson/issues/7\n            if (m.role === \"outer\" && !has_interesting_tags(wayids[m.ref].tags, rels[i].tags)) wayids[m.ref].is_multipolygon_outline = true;\n            if (m.role === \"inner\" && !has_interesting_tags(wayids[m.ref].tags)) wayids[m.ref].is_multipolygon_outline = true;\n          }\n        });\n\n        if (outer_count == 0) {\n          if (options.verbose) console.warn('Multipolygon relation', rels[i].type + '/' + rels[i].id, 'ignored because it has no outer ways');\n          continue; // ignore multipolygons without outer ways\n        }\n\n        var simple_mp = false;\n        var mp_geometry = '';\n        if (outer_count == 1 && !has_interesting_tags(rels[i].tags, {\n          \"type\": true\n        })) simple_mp = true;\n        var feature = null;\n\n        if (!simple_mp) {\n          feature = construct_multipolygon(rels[i], rels[i]);\n        } else {\n          // simple multipolygon\n          var outer_way = rels[i].members.filter(function (m) {\n            return m.role === \"outer\";\n          })[0];\n          outer_way = wayids[outer_way.ref];\n\n          if (outer_way === undefined) {\n            if (options.verbose) console.warn('Multipolygon relation', rels[i].type + '/' + rels[i].id, 'ignored because outer way', outer_way.type + '/' + outer_way.ref, 'is missing');\n            continue; // abort if outer way object is not present\n          }\n\n          outer_way.is_multipolygon_outline = true;\n          feature = construct_multipolygon(outer_way, rels[i]);\n        }\n\n        if (feature === false) {\n          if (options.verbose) console.warn('Multipolygon relation', rels[i].type + '/' + rels[i].id, 'ignored because it has invalid geometry');\n          continue; // abort if feature could not be constructed\n        }\n\n        geojsonpolygons.features.push(feature);\n      }\n    } // process lines and polygons\n\n\n    for (var i = 0; i < ways.length; i++) {\n      if (!_.isArray(ways[i].nodes)) {\n        if (options.verbose) console.warn('Way', ways[i].type + '/' + ways[i].id, 'ignored because it has no nodes');\n        continue; // ignore ways without nodes (e.g. returned by an ids_only query)\n      }\n\n      if (ways[i].is_multipolygon_outline) continue; // ignore ways which are already rendered as (part of) a multipolygon\n\n      if (typeof ways[i].id !== \"number\") {\n        // remove full geometry namespace for output\n        ways[i].id = +ways[i].id.replace(\"_fullGeom\", \"\");\n      }\n\n      ways[i].tainted = false;\n      ways[i].hidden = false;\n      var coords = new Array();\n\n      for (j = 0; j < ways[i].nodes.length; j++) {\n        if (typeof ways[i].nodes[j] == \"object\") coords.push([+ways[i].nodes[j].lon, +ways[i].nodes[j].lat]);else {\n          if (options.verbose) console.warn('Way', ways[i].type + '/' + ways[i].id, 'is tainted by an invalid node');\n          ways[i].tainted = true;\n        }\n      }\n\n      if (coords.length <= 1) {\n        // invalid way geometry\n        if (options.verbose) console.warn('Way', ways[i].type + '/' + ways[i].id, 'ignored because it contains too few nodes');\n        continue;\n      }\n\n      var way_type = \"LineString\"; // default\n\n      if (typeof ways[i].nodes[0] != \"undefined\" && // way has its nodes loaded\n      ways[i].nodes[0] === ways[i].nodes[ways[i].nodes.length - 1] && ( // ... and forms a closed ring\n      typeof ways[i].tags != \"undefined\" && // ... and has tags\n      _isPolygonFeature(ways[i].tags) // ... and tags say it is a polygon\n      || // or is a placeholder for a bounds geometry\n      ways[i].__is_bounds_placeholder)) {\n        way_type = \"Polygon\";\n        coords = [coords];\n      }\n\n      var feature = {\n        \"type\": \"Feature\",\n        \"id\": ways[i].type + \"/\" + ways[i].id,\n        \"properties\": {\n          \"type\": ways[i].type,\n          \"id\": ways[i].id,\n          \"tags\": ways[i].tags || {},\n          \"relations\": relsmap[\"way\"][ways[i].id] || [],\n          \"meta\": build_meta_information(ways[i])\n        },\n        \"geometry\": {\n          \"type\": way_type,\n          \"coordinates\": coords\n        }\n      };\n\n      if (ways[i].tainted) {\n        if (options.verbose) console.warn('Way', ways[i].type + '/' + ways[i].id, 'is tainted');\n        feature.properties[\"tainted\"] = true;\n      }\n\n      if (ways[i].__is_bounds_placeholder) feature.properties[\"geometry\"] = \"bounds\";\n      if (way_type == \"LineString\") geojsonlines.features.push(feature);else geojsonpolygons.features.push(feature);\n    }\n\n    geojson = {\n      \"type\": \"FeatureCollection\",\n      \"features\": []\n    };\n    geojson.features = geojson.features.concat(geojsonpolygons.features);\n    geojson.features = geojson.features.concat(geojsonlines.features);\n    geojson.features = geojson.features.concat(geojsonnodes.features); // optionally, flatten properties\n\n    if (options.flatProperties) {\n      geojson.features.forEach(function (f) {\n        f.properties = _.merge(f.properties.meta, f.properties.tags, {\n          id: f.properties.type + \"/\" + f.properties.id\n        });\n      });\n    } // fix polygon winding\n\n\n    geojson = rewind(geojson, true\n    /*remove for geojson-rewind >0.1.0*/\n    );\n    return geojson;\n  }\n\n  function _isPolygonFeature(tags) {\n    var polygonFeatures = options.polygonFeatures;\n    if (typeof polygonFeatures === \"function\") return polygonFeatures(tags); // explicitely tagged non-areas\n\n    if (tags['area'] === 'no') return false; // assuming that a typical OSM way has in average less tags than\n    // the polygonFeatures list, this way around should be faster\n\n    for (var key in tags) {\n      var val = tags[key];\n      var pfk = polygonFeatures[key]; // continue with next if tag is unknown or not \"categorizing\"\n\n      if (typeof pfk === 'undefined') continue; // continue with next if tag is explicitely un-set (\"building=no\")\n\n      if (val === 'no') continue; // check polygon features for: general acceptance, included or excluded values\n\n      if (pfk === true) return true;\n      if (pfk.included_values && pfk.included_values[val] === true) return true;\n      if (pfk.excluded_values && pfk.excluded_values[val] !== true) return true;\n    } // if no tags matched, this ain't no area.\n\n\n    return false;\n  }\n}; // for backwards compatibility\n\n\nosmtogeojson.toGeojson = osmtogeojson;\nmodule.exports = osmtogeojson;","map":{"version":3,"sources":["/home/rwasser/setjetters/setjettersGIS/clients/node_modules/osmtogeojson/index.js"],"names":["_","require","rewind","polygonFeatures","forEach","tags","polygon","key","list","tagValuesObj","values","value","osmtogeojson","data","options","merge","verbose","flatProperties","uninterestingTags","result","XMLDocument","childNodes","_osmXML2geoJSON","_overpassJSON2geoJSON","json","nodes","Array","ways","rels","centerGeometry","object","pseudoNode","clone","lat","center","lon","__is_center_placeholder","push","boundsGeometry","pseudoWay","addPseudoNode","i","type","id","bounds","minlat","minlon","maxlat","maxlon","__is_bounds_placeholder","fullGeometryWay","way","addFullGeometryNode","geometryNode","__is_uninteresting","isArray","geometry","map","nd","fullGeometryRelation","rel","addFullGeometryWay","some","geometryWay","addFullGeometryWayPseudoNode","geometryPseudoNode","undefined","members","member","ref","elements","length","node","has_full_geometry","_convert2geoJSON","xml","copy_attribute","x","o","attr","hasAttribute","getAttribute","centroid","nds","each","getElementsByTagName","tag","nodeObject","isEmpty","wnodes","wayObject","relation","relObject","has_interesting_tags","t","ignore_tags","k","build_meta_information","res","timestamp","version","changeset","user","uid","nodeids","Object","console","warn","poinids","j","wayids","waynids","pois","relids","relsmap","m_type","m_ref","replace","role","geojson","geojsonnodes","feature","properties","features","geojsonlines","geojsonpolygons","construct_multipolygon","tag_object","is_tainted","mp_geometry","simple_mp","mp_id","filter","m","n","compact","outers","inners","join","_first","arr","_last","joined","current","first","last","how","what","pop","slice","reverse","unshift","splice","apply","mp","findOuter","inner","polygonIntersectsPolygon","outer","pointInPolygon","mapCoordinates","from","point","y","inside","xi","yi","xj","yj","intersect","mp_coords","cluster","cl","ring","mp_type","outer_count","is_multipolygon_outline","outer_way","tainted","hidden","coords","way_type","_isPolygonFeature","concat","f","meta","val","pfk","included_values","excluded_values","toGeojson","module","exports"],"mappings":"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","sourcesContent":["var _ = require(\"./lodash.custom.js\");\nvar rewind = require(\"geojson-rewind\");\n\n// see https://wiki.openstreetmap.org/wiki/Overpass_turbo/Polygon_Features\nvar polygonFeatures = {};\nrequire(\"osm-polygon-features\").forEach(function(tags) {\n  if (tags.polygon === \"all\")\n    polygonFeatures[tags.key] = true;\n  else {\n    var list = (tags.polygon === \"whitelist\") ? \"included_values\" : \"excluded_values\",\n        tagValuesObj = {};\n    tags.values.forEach(function(value) { tagValuesObj[value] = true; });\n    polygonFeatures[tags.key] = {};\n    polygonFeatures[tags.key][list] = tagValuesObj;\n  }\n});\n\nvar osmtogeojson = {};\n\nosmtogeojson = function( data, options ) {\n\n  options = _.merge(\n    {\n      verbose: false,\n      flatProperties: false,\n      uninterestingTags: {\n        \"source\": true,\n        \"source_ref\": true,\n        \"source:ref\": true,\n        \"history\": true,\n        \"attribution\": true,\n        \"created_by\": true,\n        \"tiger:county\": true,\n        \"tiger:tlid\": true,\n        \"tiger:upload_uuid\": true\n      },\n      polygonFeatures: polygonFeatures,\n    },\n    options\n  );\n\n  var result;\n  if ( ((typeof XMLDocument !== \"undefined\") && data instanceof XMLDocument ||\n        (typeof XMLDocument === \"undefined\") && data.childNodes) )\n    result = _osmXML2geoJSON(data);\n  else\n    result = _overpassJSON2geoJSON(data);\n  return result;\n\n  function _overpassJSON2geoJSON(json) {\n    // sort elements\n    var nodes = new Array();\n    var ways  = new Array();\n    var rels  = new Array();\n    // helper functions\n    function centerGeometry(object) {\n      var pseudoNode = _.clone(object);\n      pseudoNode.lat = object.center.lat;\n      pseudoNode.lon = object.center.lon;\n      pseudoNode.__is_center_placeholder = true;\n      nodes.push(pseudoNode);\n    }\n    function boundsGeometry(object) {\n      var pseudoWay = _.clone(object);\n      pseudoWay.nodes = [];\n      function addPseudoNode(lat,lon,i) {\n        var pseudoNode = {\n          type:\"node\",\n          id:  \"_\"+pseudoWay.type+\"/\"+pseudoWay.id+\"bounds\"+i,\n          lat: lat,\n          lon: lon\n        }\n        pseudoWay.nodes.push(pseudoNode.id);\n        nodes.push(pseudoNode);\n      }\n      addPseudoNode(pseudoWay.bounds.minlat,pseudoWay.bounds.minlon,1);\n      addPseudoNode(pseudoWay.bounds.maxlat,pseudoWay.bounds.minlon,2);\n      addPseudoNode(pseudoWay.bounds.maxlat,pseudoWay.bounds.maxlon,3);\n      addPseudoNode(pseudoWay.bounds.minlat,pseudoWay.bounds.maxlon,4);\n      pseudoWay.nodes.push(pseudoWay.nodes[0]);\n      pseudoWay.__is_bounds_placeholder = true;\n      ways.push(pseudoWay);\n    }\n    function fullGeometryWay(way) {\n      function addFullGeometryNode(lat,lon,id) {\n        var geometryNode = {\n          type:\"node\",\n          id:  id,\n          lat: lat,\n          lon: lon,\n          __is_uninteresting: true\n        }\n        nodes.push(geometryNode);\n      }\n      if (!_.isArray(way.nodes)) {\n        way.nodes = way.geometry.map(function(nd) {\n          if (nd !== null) // have to skip ref-less nodes\n            return \"_anonymous@\"+nd.lat+\"/\"+nd.lon;\n          else\n            return \"_anonymous@unknown_location\";\n        });\n      }\n      way.geometry.forEach(function(nd, i) {\n        if (nd) {\n          addFullGeometryNode(\n            nd.lat,\n            nd.lon,\n            way.nodes[i]\n          );\n        }\n      });\n    }\n    function fullGeometryRelation(rel) {\n      function addFullGeometryNode(lat,lon,id) {\n        var geometryNode = {\n          type:\"node\",\n          id:  id,\n          lat: lat,\n          lon: lon\n        }\n        nodes.push(geometryNode);\n      }\n      function addFullGeometryWay(geometry,id) {\n        // shared multipolygon ways cannot be defined multiple times with the same id.\n        if (ways.some(function (way) { // todo: this is slow :(\n          return way.type == \"way\" && way.id == id;\n        })) return;\n        var geometryWay = {\n          type: \"way\",\n          id:   id,\n          nodes:[]\n        }\n        function addFullGeometryWayPseudoNode(lat,lon) {\n          // todo? do not save the same pseudo node multiple times\n          var geometryPseudoNode = {\n            type:\"node\",\n            id:  \"_anonymous@\"+lat+\"/\"+lon,\n            lat: lat,\n            lon: lon,\n            __is_uninteresting: true\n          }\n          geometryWay.nodes.push(geometryPseudoNode.id);\n          nodes.push(geometryPseudoNode);\n        }\n        geometry.forEach(function(nd) {\n          if (nd) {\n            addFullGeometryWayPseudoNode(\n              nd.lat,\n              nd.lon\n            );\n          } else {\n            geometryWay.nodes.push(undefined);\n          }\n        });\n        ways.push(geometryWay);\n      }\n      rel.members.forEach(function(member, i) {\n        if (member.type == \"node\") {\n          if (member.lat) {\n            addFullGeometryNode(\n              member.lat,\n              member.lon,\n              member.ref\n            );\n          }\n        } else if (member.type == \"way\") {\n          if (member.geometry) {\n            member.ref = \"_fullGeom\"+member.ref;\n            addFullGeometryWay(\n              member.geometry,\n              member.ref\n            );\n          }\n        }\n      });\n    }\n    // create copies of individual json objects to make sure the original data doesn't get altered\n    // todo: cloning is slow: see if this can be done differently!\n    for (var i=0;i<json.elements.length;i++) {\n      switch (json.elements[i].type) {\n      case \"node\":\n        var node = json.elements[i];\n        nodes.push(node);\n      break;\n      case \"way\":\n        var way = _.clone(json.elements[i]);\n        way.nodes = _.clone(way.nodes);\n        ways.push(way);\n        if (way.center)\n          centerGeometry(way);\n        if (way.geometry)\n          fullGeometryWay(way);\n        else if (way.bounds)\n          boundsGeometry(way);\n      break;\n      case \"relation\":\n        var rel = _.clone(json.elements[i]);\n        rel.members = _.clone(rel.members);\n        rels.push(rel);\n        var has_full_geometry = rel.members && rel.members.some(function (member) {\n          return member.type == \"node\" && member.lat ||\n                 member.type == \"way\"  && member.geometry && member.geometry.length > 0\n        });\n        if (rel.center)\n          centerGeometry(rel);\n        if (has_full_geometry)\n          fullGeometryRelation(rel);\n        else if (rel.bounds)\n          boundsGeometry(rel);\n      break;\n      default:\n      // type=area (from coord-query) is an example for this case.\n      }\n    }\n    return _convert2geoJSON(nodes,ways,rels);\n  }\n  function _osmXML2geoJSON(xml) {\n    // sort elements\n    var nodes = new Array();\n    var ways  = new Array();\n    var rels  = new Array();\n    // helper function\n    function copy_attribute( x, o, attr ) {\n      if (x.hasAttribute(attr))\n        o[attr] = x.getAttribute(attr);\n    }\n    function centerGeometry(object, centroid) {\n      var pseudoNode = _.clone(object);\n      copy_attribute(centroid, pseudoNode, 'lat');\n      copy_attribute(centroid, pseudoNode, 'lon');\n      pseudoNode.__is_center_placeholder = true;\n      nodes.push(pseudoNode);\n    }\n    function boundsGeometry(object, bounds) {\n      var pseudoWay = _.clone(object);\n      pseudoWay.nodes = [];\n      function addPseudoNode(lat,lon,i) {\n        var pseudoNode = {\n          type:\"node\",\n          id:  \"_\"+pseudoWay.type+\"/\"+pseudoWay.id+\"bounds\"+i,\n          lat: lat,\n          lon: lon\n        }\n        pseudoWay.nodes.push(pseudoNode.id);\n        nodes.push(pseudoNode);\n      }\n      addPseudoNode(bounds.getAttribute('minlat'),bounds.getAttribute('minlon'),1);\n      addPseudoNode(bounds.getAttribute('maxlat'),bounds.getAttribute('minlon'),2);\n      addPseudoNode(bounds.getAttribute('maxlat'),bounds.getAttribute('maxlon'),3);\n      addPseudoNode(bounds.getAttribute('minlat'),bounds.getAttribute('maxlon'),4);\n      pseudoWay.nodes.push(pseudoWay.nodes[0]);\n      pseudoWay.__is_bounds_placeholder = true;\n      ways.push(pseudoWay);\n    }\n    function fullGeometryWay(way, nds) {\n      function addFullGeometryNode(lat,lon,id) {\n        var geometryNode = {\n          type:\"node\",\n          id:  id,\n          lat: lat,\n          lon: lon,\n          __is_uninteresting: true\n        }\n        nodes.push(geometryNode);\n        return geometryNode.id;\n      }\n      if (!_.isArray(way.nodes)) {\n        way.nodes = [];\n        _.each( nds, function( nd, i ) {\n          way.nodes.push(\"_anonymous@\"+nd.getAttribute('lat')+\"/\"+nd.getAttribute('lon'));\n        });\n      }\n      _.each( nds, function( nd, i ) {\n        if (nd.getAttribute('lat')) {\n          addFullGeometryNode(\n            nd.getAttribute('lat'),\n            nd.getAttribute('lon'),\n            way.nodes[i]\n          );\n        }\n      });\n    }\n    function fullGeometryRelation(rel, members) {\n      function addFullGeometryNode(lat,lon,id) {\n        var geometryNode = {\n          type:\"node\",\n          id:  id,\n          lat: lat,\n          lon: lon\n        }\n        nodes.push(geometryNode);\n      }\n      function addFullGeometryWay(nds,id) {\n        // shared multipolygon ways cannot be defined multiple times with the same id.\n        if (ways.some(function (way) { // todo: this is slow :(\n          return way.type == \"way\" && way.id == id;\n        })) return;\n        var geometryWay = {\n          type: \"way\",\n          id:   id,\n          nodes:[]\n        }\n        function addFullGeometryWayPseudoNode(lat,lon) {\n          // todo? do not save the same pseudo node multiple times\n          var geometryPseudoNode = {\n            type:\"node\",\n            id:  \"_anonymous@\"+lat+\"/\"+lon,\n            lat: lat,\n            lon: lon,\n            __is_uninteresting: true\n          }\n          geometryWay.nodes.push(geometryPseudoNode.id);\n          nodes.push(geometryPseudoNode);\n        }\n        _.each(nds, function(nd) {\n          if (nd.getAttribute('lat')) {\n            addFullGeometryWayPseudoNode(\n              nd.getAttribute('lat'),\n              nd.getAttribute('lon')\n            );\n          } else {\n            geometryWay.nodes.push(undefined);\n          }\n        });\n        ways.push(geometryWay);\n      }\n      _.each( members, function( member, i ) {\n        if (rel.members[i].type == \"node\") {\n          if (member.getAttribute('lat')) {\n            addFullGeometryNode(\n              member.getAttribute('lat'),\n              member.getAttribute('lon'),\n              rel.members[i].ref\n            );\n          }\n        } else if (rel.members[i].type == \"way\") {\n          if (member.getElementsByTagName('nd').length > 0) {\n            rel.members[i].ref = \"_fullGeom\"+rel.members[i].ref;\n            addFullGeometryWay(\n              member.getElementsByTagName('nd'),\n              rel.members[i].ref\n            );\n          }\n        }\n      });\n    }\n    // nodes\n    _.each( xml.getElementsByTagName('node'), function( node, i ) {\n      var tags = {};\n      _.each( node.getElementsByTagName('tag'), function( tag ) {\n        tags[tag.getAttribute('k')] = tag.getAttribute('v');\n      });\n      var nodeObject = {\n        'type': 'node'\n      };\n      copy_attribute( node, nodeObject, 'id' );\n      copy_attribute( node, nodeObject, 'lat' );\n      copy_attribute( node, nodeObject, 'lon' );\n      copy_attribute( node, nodeObject, 'version' );\n      copy_attribute( node, nodeObject, 'timestamp' );\n      copy_attribute( node, nodeObject, 'changeset' );\n      copy_attribute( node, nodeObject, 'uid' );\n      copy_attribute( node, nodeObject, 'user' );\n      if (!_.isEmpty(tags))\n        nodeObject.tags = tags;\n      nodes.push(nodeObject);\n    });\n    // ways\n    var centroid,bounds;\n    _.each( xml.getElementsByTagName('way'), function( way, i ) {\n      var tags = {};\n      var wnodes = [];\n      _.each( way.getElementsByTagName('tag'), function( tag ) {\n        tags[tag.getAttribute('k')] = tag.getAttribute('v');\n      });\n      var has_full_geometry = false;\n      _.each( way.getElementsByTagName('nd'), function( nd, i ) {\n        var id;\n        if (id = nd.getAttribute('ref'))\n          wnodes[i] = id;\n        if (!has_full_geometry && nd.getAttribute('lat'))\n          has_full_geometry = true;\n      });\n      var wayObject = {\n        \"type\": \"way\"\n      };\n      copy_attribute( way, wayObject, 'id' );\n      copy_attribute( way, wayObject, 'version' );\n      copy_attribute( way, wayObject, 'timestamp' );\n      copy_attribute( way, wayObject, 'changeset' );\n      copy_attribute( way, wayObject, 'uid' );\n      copy_attribute( way, wayObject, 'user' );\n      if (wnodes.length > 0)\n        wayObject.nodes = wnodes;\n      if (!_.isEmpty(tags))\n        wayObject.tags = tags;\n      if (centroid = way.getElementsByTagName('center')[0])\n        centerGeometry(wayObject,centroid);\n      if (has_full_geometry)\n        fullGeometryWay(wayObject, way.getElementsByTagName('nd'));\n      else if (bounds = way.getElementsByTagName('bounds')[0])\n        boundsGeometry(wayObject,bounds);\n      ways.push(wayObject);\n    });\n    // relations\n    _.each( xml.getElementsByTagName('relation'), function( relation, i ) {\n      var tags = {};\n      var members = [];\n      _.each( relation.getElementsByTagName('tag'), function( tag ) {\n        tags[tag.getAttribute('k')] = tag.getAttribute('v');\n      });\n      var has_full_geometry = false;\n      _.each( relation.getElementsByTagName('member'), function( member, i ) {\n        members[i] = {};\n        copy_attribute( member, members[i], 'ref' );\n        copy_attribute( member, members[i], 'role' );\n        copy_attribute( member, members[i], 'type' );\n        if (!has_full_geometry &&\n             (members[i].type == 'node' && member.getAttribute('lat')) ||\n             (members[i].type == 'way'  && member.getElementsByTagName('nd').length>0) )\n          has_full_geometry = true;\n      });\n      var relObject = {\n        \"type\": \"relation\"\n      }\n      copy_attribute( relation, relObject, 'id' );\n      copy_attribute( relation, relObject, 'version' );\n      copy_attribute( relation, relObject, 'timestamp' );\n      copy_attribute( relation, relObject, 'changeset' );\n      copy_attribute( relation, relObject, 'uid' );\n      copy_attribute( relation, relObject, 'user' );\n      if (members.length > 0)\n        relObject.members = members;\n      if (!_.isEmpty(tags))\n        relObject.tags = tags;\n      if (centroid = relation.getElementsByTagName('center')[0])\n        centerGeometry(relObject,centroid);\n      if (has_full_geometry)\n        fullGeometryRelation(relObject, relation.getElementsByTagName('member'));\n      else if (bounds = relation.getElementsByTagName('bounds')[0])\n        boundsGeometry(relObject,bounds);\n      rels.push(relObject);\n    });\n    return _convert2geoJSON(nodes,ways,rels);\n  }\n  function _convert2geoJSON(nodes,ways,rels) {\n\n    // helper function that checks if there are any tags other than \"created_by\", \"source\", etc. or any tag provided in ignore_tags\n    function has_interesting_tags(t, ignore_tags) {\n      if (typeof ignore_tags !== \"object\")\n        ignore_tags={};\n      if (typeof options.uninterestingTags === \"function\")\n        return !options.uninterestingTags(t, ignore_tags);\n      for (var k in t)\n        if (!(options.uninterestingTags[k]===true) &&\n            !(ignore_tags[k]===true || ignore_tags[k]===t[k]))\n          return true;\n      return false;\n    };\n    // helper function to extract meta information\n    function build_meta_information(object) {\n      var res = {\n        \"timestamp\": object.timestamp,\n        \"version\": object.version,\n        \"changeset\": object.changeset,\n        \"user\": object.user,\n        \"uid\": object.uid\n      };\n      for (var k in res)\n        if (res[k] === undefined)\n          delete res[k];\n      return res;\n    }\n\n    // some data processing (e.g. filter nodes only used for ways)\n    var nodeids = new Object();\n    for (var i=0;i<nodes.length;i++) {\n      if (nodes[i].lat === undefined) {\n        if (options.verbose) console.warn('Node',nodes[i].type+'/'+nodes[i].id,'ignored because it has no coordinates');\n        continue; // ignore nodes without coordinates (e.g. returned by an ids_only query)\n      }\n      nodeids[nodes[i].id] = nodes[i];\n    }\n    var poinids = new Object();\n    for (var i=0;i<nodes.length;i++) {\n      if (typeof nodes[i].tags != 'undefined' &&\n          has_interesting_tags(nodes[i].tags)) // this checks if the node has any tags other than \"created_by\"\n        poinids[nodes[i].id] = true;\n    }\n    for (var i=0;i<rels.length;i++) {\n      if (!_.isArray(rels[i].members)) {\n        if (options.verbose) console.warn('Relation',rels[i].type+'/'+rels[i].id,'ignored because it has no members');\n        continue; // ignore relations without members (e.g. returned by an ids_only query)\n      }\n      for (var j=0;j<rels[i].members.length;j++) {\n        if (rels[i].members[j].type == \"node\")\n          poinids[rels[i].members[j].ref] = true;\n      }\n    }\n    var wayids = new Object();\n    var waynids = new Object();\n    for (var i=0;i<ways.length;i++) {\n      if (!_.isArray(ways[i].nodes)) {\n        if (options.verbose) console.warn('Way',ways[i].type+'/'+ways[i].id,'ignored because it has no nodes');\n        continue; // ignore ways without nodes (e.g. returned by an ids_only query)\n      }\n      wayids[ways[i].id] = ways[i];\n      for (var j=0;j<ways[i].nodes.length;j++) {\n        waynids[ways[i].nodes[j]] = true;\n        ways[i].nodes[j] = nodeids[ways[i].nodes[j]];\n      }\n    }\n    var pois = new Array();\n    for (var i=0;i<nodes.length;i++) {\n      if (((!waynids[nodes[i].id]) ||\n          (poinids[nodes[i].id])) &&\n          !nodes[i].__is_uninteresting)\n        pois.push(nodes[i]);\n    }\n    var relids = new Array();\n    for (var i=0;i<rels.length;i++) {\n      if (!_.isArray(rels[i].members)) {\n        if (options.verbose) console.warn('Relation',rels[i].type+'/'+rels[i].id,'ignored because it has no members');\n        continue; // ignore relations without members (e.g. returned by an ids_only query)\n      }\n      relids[rels[i].id] = rels[i];\n    }\n    var relsmap = {node: {}, way: {}, relation: {}};\n    for (var i=0;i<rels.length;i++) {\n      if (!_.isArray(rels[i].members)) {\n        if (options.verbose) console.warn('Relation',rels[i].type+'/'+rels[i].id,'ignored because it has no members');\n        continue; // ignore relations without members (e.g. returned by an ids_only query)\n      }\n      for (var j=0;j<rels[i].members.length;j++) {\n        var m_type = rels[i].members[j].type;\n        var m_ref = rels[i].members[j].ref;\n        if (typeof m_ref !== \"number\") {\n          // de-namespace full geometry content\n          m_ref = m_ref.replace(\"_fullGeom\", \"\");\n        }\n        if (!relsmap[m_type]) {\n          if (options.verbose) console.warn('Relation',rels[i].type+'/'+rels[i].id,'member',m_type+'/'+m_ref,'ignored because it has an invalid type');\n          continue;\n        }\n        if (typeof relsmap[m_type][m_ref] === \"undefined\")\n          relsmap[m_type][m_ref] = [];\n        relsmap[m_type][m_ref].push({\n          \"role\" : rels[i].members[j].role,\n          \"rel\" : rels[i].id,\n          \"reltags\" : rels[i].tags,\n        });\n      }\n    }\n    // construct geojson\n    var geojson;\n    var geojsonnodes = {\n      \"type\"     : \"FeatureCollection\",\n      \"features\" : new Array()};\n    for (i=0;i<pois.length;i++) {\n      if (typeof pois[i].lon == \"undefined\" || typeof pois[i].lat == \"undefined\") {\n        if (options.verbose) console.warn('POI',pois[i].type+'/'+pois[i].id,'ignored because it lacks coordinates');\n        continue; // lon and lat are required for showing a point\n      }\n      var feature = {\n        \"type\"       : \"Feature\",\n        \"id\"         : pois[i].type+\"/\"+pois[i].id,\n        \"properties\" : {\n          \"type\" : pois[i].type,\n          \"id\"   : pois[i].id,\n          \"tags\" : pois[i].tags || {},\n          \"relations\" : relsmap[\"node\"][pois[i].id] || [],\n          \"meta\": build_meta_information(pois[i])\n        },\n        \"geometry\"   : {\n          \"type\" : \"Point\",\n          \"coordinates\" : [+pois[i].lon, +pois[i].lat],\n        }\n      };\n      if (pois[i].__is_center_placeholder)\n        feature.properties[\"geometry\"] = \"center\";\n      geojsonnodes.features.push(feature);\n    }\n    var geojsonlines = {\n      \"type\"     : \"FeatureCollection\",\n      \"features\" : new Array()};\n    var geojsonpolygons = {\n      \"type\"     : \"FeatureCollection\",\n      \"features\" : new Array()};\n    // process multipolygons\n    for (var i=0;i<rels.length;i++) {\n      if ((typeof rels[i].tags != \"undefined\") &&\n          (rels[i].tags[\"type\"] == \"multipolygon\" || rels[i].tags[\"type\"] == \"boundary\")) {\n        if (!_.isArray(rels[i].members)) {\n          if (options.verbose) console.warn('Multipolygon',rels[i].type+'/'+rels[i].id,'ignored because it has no members');\n          continue; // ignore relations without members (e.g. returned by an ids_only query)\n        }\n        var outer_count = 0;\n        for (var j=0;j<rels[i].members.length;j++)\n          if (rels[i].members[j].role == \"outer\")\n            outer_count++;\n          else if (options.verbose && rels[i].members[j].role != \"inner\")\n            console.warn('Multipolygon',rels[i].type+'/'+rels[i].id,'member',rels[i].members[j].type+'/'+rels[i].members[j].ref,'ignored because it has an invalid role: \"' + rels[i].members[j].role + '\"');\n        rels[i].members.forEach(function(m) {\n          if (wayids[m.ref]) {\n            // this even works in the following corner case:\n            // a multipolygon amenity=xxx with outer line tagged amenity=yyy\n            // see https://github.com/tyrasd/osmtogeojson/issues/7\n            if (m.role===\"outer\" && !has_interesting_tags(wayids[m.ref].tags,rels[i].tags))\n              wayids[m.ref].is_multipolygon_outline = true;\n            if (m.role===\"inner\" && !has_interesting_tags(wayids[m.ref].tags))\n              wayids[m.ref].is_multipolygon_outline = true;\n          }\n        });\n        if (outer_count == 0) {\n          if (options.verbose) console.warn('Multipolygon relation',rels[i].type+'/'+rels[i].id,'ignored because it has no outer ways');\n          continue; // ignore multipolygons without outer ways\n        }\n        var simple_mp = false;\n        var mp_geometry = '';\n        if (outer_count == 1 && !has_interesting_tags(rels[i].tags, {\"type\":true}))\n          simple_mp = true;\n        var feature = null;\n        if (!simple_mp) {\n          feature = construct_multipolygon(rels[i], rels[i]);\n        } else {\n          // simple multipolygon\n          var outer_way = rels[i].members.filter(function(m) {return m.role === \"outer\";})[0];\n          outer_way = wayids[outer_way.ref];\n          if (outer_way === undefined) {\n            if (options.verbose) console.warn('Multipolygon relation',rels[i].type+'/'+rels[i].id,'ignored because outer way', outer_way.type+'/'+outer_way.ref,'is missing');\n            continue; // abort if outer way object is not present\n          }\n          outer_way.is_multipolygon_outline = true;\n          feature = construct_multipolygon(outer_way, rels[i]);\n        }\n        if (feature === false) {\n          if (options.verbose) console.warn('Multipolygon relation',rels[i].type+'/'+rels[i].id,'ignored because it has invalid geometry');\n          continue; // abort if feature could not be constructed\n        }\n        geojsonpolygons.features.push(feature);\n        function construct_multipolygon(tag_object, rel) {\n          var is_tainted = false;\n          var mp_geometry = simple_mp ? 'way' : 'relation',\n              mp_id = typeof tag_object.id === \"number\" ? tag_object.id : +(tag_object.id.replace(\"_fullGeom\", \"\"));\n          // prepare mp members\n          var members;\n          members = rel.members.filter(function(m) {return m.type === \"way\";});\n          members = members.map(function(m) {\n            var way = wayids[m.ref];\n            if (way === undefined) { // check for missing ways\n              if (options.verbose) console.warn('Multipolygon', mp_geometry+'/'+mp_id, 'tainted by a missing way', m.type+'/'+m.ref);\n              is_tainted = true;\n              return;\n            }\n            return { // TODO: this is slow! :(\n              id: m.ref,\n              role: m.role || \"outer\",\n              way: way,\n              nodes: way.nodes.filter(function(n) {\n                if (n !== undefined)\n                  return true;\n                is_tainted = true;\n                if (options.verbose) console.warn('Multipolygon', mp_geometry+'/'+mp_id,  'tainted by a way', m.type+'/'+m.ref, 'with a missing node');\n                return false;\n              })\n            };\n          });\n          members = _.compact(members);\n          // construct outer and inner rings\n          var outers, inners;\n          function join(ways) {\n            var _first = function(arr) {return arr[0]};\n            var _last  = function(arr) {return arr[arr.length-1]};\n            // stolen from iD/relation.js\n            var joined = [], current, first, last, i, how, what;\n            while (ways.length) {\n              current = ways.pop().nodes.slice();\n              joined.push(current);\n              while (ways.length && _first(current) !== _last(current)) {\n                first = _first(current);\n                last  = _last(current);\n                for (i = 0; i < ways.length; i++) {\n                  what = ways[i].nodes;\n                  if (last === _first(what)) {\n                    how  = current.push;\n                    what = what.slice(1);\n                    break;\n                  } else if (last === _last(what)) {\n                    how  = current.push;\n                    what = what.slice(0, -1).reverse();\n                    break;\n                  } else if (first == _last(what)) {\n                    how  = current.unshift;\n                    what = what.slice(0, -1);\n                    break;\n                  } else if (first == _first(what)) {\n                    how  = current.unshift;\n                    what = what.slice(1).reverse();\n                    break;\n                  } else {\n                    what = how = null;\n                  }\n                }\n                if (!what) {\n                  if (options.verbose) console.warn('Multipolygon', mp_geometry+'/'+mp_id, 'contains unclosed ring geometry');\n                  break; // Invalid geometry (dangling way, unclosed ring)\n                }\n                ways.splice(i, 1);\n                how.apply(current, what);\n              }\n            }\n            return joined;\n          }\n          outers = join(members.filter(function(m) {return m.role===\"outer\";}));\n          inners = join(members.filter(function(m) {return m.role===\"inner\";}));\n          // sort rings\n          var mp;\n          function findOuter(inner) {\n            var polygonIntersectsPolygon = function(outer, inner) {\n              for (var i=0; i<inner.length; i++)\n                if (pointInPolygon(inner[i], outer))\n                  return true;\n              return false;\n            }\n            var mapCoordinates = function(from) {\n              return from.map(function(n) {\n                return [+n.lat,+n.lon];\n              });\n            }\n            // stolen from iD/geo.js,\n            // based on https://github.com/substack/point-in-polygon,\n            // ray-casting algorithm based on http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\n            var pointInPolygon = function(point, polygon) {\n              var x = point[0], y = point[1], inside = false;\n              for (var i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n                var xi = polygon[i][0], yi = polygon[i][1];\n                var xj = polygon[j][0], yj = polygon[j][1];\n                var intersect = ((yi > y) != (yj > y)) &&\n                  (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\n                if (intersect) inside = !inside;\n              }\n              return inside;\n            };\n            // stolen from iD/relation.js\n            var o, outer;\n            // todo: all this coordinate mapping makes this unneccesarily slow.\n            // see the \"todo: this is slow! :(\" above.\n            inner = mapCoordinates(inner);\n            /*for (o = 0; o < outers.length; o++) {\n              outer = mapCoordinates(outers[o]);\n              if (polygonContainsPolygon(outer, inner))\n                return o;\n            }*/\n            for (o = 0; o < outers.length; o++) {\n              outer = mapCoordinates(outers[o]);\n              if (polygonIntersectsPolygon(outer, inner))\n                return o;\n            }\n          }\n          mp = outers.map(function(o) {return [o];});\n          for (var j=0; j<inners.length; j++) {\n            var o = findOuter(inners[j]);\n            if (o !== undefined)\n              mp[o].push(inners[j]);\n            else\n              if (options.verbose) console.warn('Multipolygon', mp_geometry+'/'+mp_id, 'contains an inner ring with no containing outer');\n              // so, no outer ring for this inner ring is found.\n              // We're going to ignore holes in empty space.\n              ;\n          }\n          // sanitize mp-coordinates (remove empty clusters or rings, {lat,lon,...} to [lon,lat]\n          var mp_coords = [];\n          mp_coords = _.compact(mp.map(function(cluster) {\n            var cl = _.compact(cluster.map(function(ring) {\n              if (ring.length < 4) { // todo: is this correct: ring.length < 4 ?\n                if (options.verbose) console.warn('Multipolygon', mp_geometry+'/'+mp_id, 'contains a ring with less than four nodes');\n                return;\n              }\n              return _.compact(ring.map(function(node) {\n                return [+node.lon,+node.lat];\n              }));\n            }));\n            if (cl.length == 0) {\n              if (options.verbose) console.warn('Multipolygon', mp_geometry+'/'+mp_id, 'contains an empty ring cluster');\n              return;\n            }\n            return cl;\n          }));\n\n          if (mp_coords.length == 0) {\n            if (options.verbose) console.warn('Multipolygon', mp_geometry+'/'+mp_id, 'contains no coordinates');\n            return false; // ignore multipolygons without coordinates\n          }\n          var mp_type = \"MultiPolygon\";\n          if (mp_coords.length === 1) {\n            mp_type = \"Polygon\";\n            mp_coords = mp_coords[0];\n          }\n          // mp parsed, now construct the geoJSON\n          var feature = {\n            \"type\"       : \"Feature\",\n            \"id\"         : tag_object.type+\"/\"+mp_id,\n            \"properties\" : {\n              \"type\" : tag_object.type,\n              \"id\"   : mp_id,\n              \"tags\" : tag_object.tags || {},\n              \"relations\" :  relsmap[tag_object.type][tag_object.id] || [],\n              \"meta\": build_meta_information(tag_object)\n            },\n            \"geometry\"   : {\n              \"type\" : mp_type,\n              \"coordinates\" : mp_coords,\n            }\n          }\n          if (is_tainted) {\n            if (options.verbose) console.warn('Multipolygon', mp_geometry+'/'+mp_id, 'is tainted');\n            feature.properties[\"tainted\"] = true;\n          }\n          return feature;\n        }\n      }\n    }\n    // process lines and polygons\n    for (var i=0;i<ways.length;i++) {\n      if (!_.isArray(ways[i].nodes)) {\n        if (options.verbose) console.warn('Way',ways[i].type+'/'+ways[i].id,'ignored because it has no nodes');\n        continue; // ignore ways without nodes (e.g. returned by an ids_only query)\n      }\n      if (ways[i].is_multipolygon_outline)\n        continue; // ignore ways which are already rendered as (part of) a multipolygon\n      if (typeof ways[i].id !== \"number\") {\n        // remove full geometry namespace for output\n        ways[i].id = +ways[i].id.replace(\"_fullGeom\", \"\");\n      }\n      ways[i].tainted = false;\n      ways[i].hidden = false;\n      var coords = new Array();\n      for (j=0;j<ways[i].nodes.length;j++) {\n        if (typeof ways[i].nodes[j] == \"object\")\n          coords.push([+ways[i].nodes[j].lon, +ways[i].nodes[j].lat]);\n        else {\n          if (options.verbose) console.warn('Way',ways[i].type+'/'+ways[i].id,'is tainted by an invalid node');\n          ways[i].tainted = true;\n        }\n      }\n      if (coords.length <= 1) { // invalid way geometry\n        if (options.verbose) console.warn('Way',ways[i].type+'/'+ways[i].id,'ignored because it contains too few nodes');\n        continue;\n      }\n      var way_type = \"LineString\"; // default\n      if (typeof ways[i].nodes[0] != \"undefined\" && // way has its nodes loaded\n        ways[i].nodes[0] === ways[i].nodes[ways[i].nodes.length-1] && // ... and forms a closed ring\n        (\n          typeof ways[i].tags != \"undefined\" && // ... and has tags\n          _isPolygonFeature(ways[i].tags) // ... and tags say it is a polygon\n          || // or is a placeholder for a bounds geometry\n          ways[i].__is_bounds_placeholder\n        )\n      ) {\n        way_type = \"Polygon\";\n        coords = [coords];\n      }\n      var feature = {\n        \"type\"       : \"Feature\",\n        \"id\"         : ways[i].type+\"/\"+ways[i].id,\n        \"properties\" : {\n          \"type\" : ways[i].type,\n          \"id\"   : ways[i].id,\n          \"tags\" : ways[i].tags || {},\n          \"relations\" : relsmap[\"way\"][ways[i].id] || [],\n          \"meta\": build_meta_information(ways[i])\n        },\n        \"geometry\"   : {\n          \"type\" : way_type,\n          \"coordinates\" : coords,\n        }\n      }\n      if (ways[i].tainted) {\n        if (options.verbose) console.warn('Way',ways[i].type+'/'+ways[i].id,'is tainted');\n        feature.properties[\"tainted\"] = true;\n      }\n      if (ways[i].__is_bounds_placeholder)\n        feature.properties[\"geometry\"] = \"bounds\";\n      if (way_type == \"LineString\")\n        geojsonlines.features.push(feature);\n      else\n        geojsonpolygons.features.push(feature);\n    }\n\n    geojson = {\n      \"type\": \"FeatureCollection\",\n      \"features\": []\n    };\n    geojson.features = geojson.features.concat(geojsonpolygons.features);\n    geojson.features = geojson.features.concat(geojsonlines.features);\n    geojson.features = geojson.features.concat(geojsonnodes.features);\n    // optionally, flatten properties\n    if (options.flatProperties) {\n      geojson.features.forEach(function(f) {\n        f.properties = _.merge(\n          f.properties.meta,\n          f.properties.tags,\n          {id: f.properties.type+\"/\"+f.properties.id}\n        );\n      });\n    }\n    // fix polygon winding\n    geojson = rewind(geojson, true /*remove for geojson-rewind >0.1.0*/);\n    return geojson;\n  }\n  function _isPolygonFeature( tags ) {\n    var polygonFeatures = options.polygonFeatures;\n    if (typeof polygonFeatures === \"function\")\n      return polygonFeatures(tags);\n    // explicitely tagged non-areas\n    if ( tags['area'] === 'no' )\n      return false;\n    // assuming that a typical OSM way has in average less tags than\n    // the polygonFeatures list, this way around should be faster\n    for ( var key in tags ) {\n      var val = tags[key];\n      var pfk = polygonFeatures[key];\n      // continue with next if tag is unknown or not \"categorizing\"\n      if ( typeof pfk === 'undefined' )\n        continue;\n      // continue with next if tag is explicitely un-set (\"building=no\")\n      if ( val === 'no' )\n        continue;\n      // check polygon features for: general acceptance, included or excluded values\n      if ( pfk === true )\n        return true;\n      if ( pfk.included_values && pfk.included_values[val] === true )\n        return true;\n      if ( pfk.excluded_values && pfk.excluded_values[val] !== true )\n        return true;\n    }\n    // if no tags matched, this ain't no area.\n    return false;\n  }\n};\n\n// for backwards compatibility\nosmtogeojson.toGeojson = osmtogeojson;\n\nmodule.exports = osmtogeojson;\n"]},"metadata":{},"sourceType":"script"}