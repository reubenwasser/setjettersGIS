{"ast":null,"code":"import _classCallCheck from \"/home/rwasser/setjetters/setjettersGIS/clients/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/rwasser/setjetters/setjettersGIS/clients/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/rwasser/setjetters/setjettersGIS/clients/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/rwasser/setjetters/setjettersGIS/clients/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/rwasser/setjetters/setjettersGIS/clients/src/components/Map/Layers/Businesses.js\";\nimport React from 'react';\nimport { GeoJSON } from 'react-leaflet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar overpass = require('query-overpass');\n\nvar Businesses = /*#__PURE__*/function (_React$Component) {\n  _inherits(Businesses, _React$Component);\n\n  var _super = _createSuper(Businesses);\n\n  function Businesses(props) {\n    var _this;\n\n    _classCallCheck(this, Businesses);\n\n    _this = _super.call(this, props);\n\n    _this.dataHandler = function (error, osmData) {\n      alert(\"\".concat(osmData.features.length, \" results returned\"));\n\n      if (!error && osmData.features !== undefined) {\n        _this.setState({\n          geojson: osmData\n        });\n      }\n\n      if (error) {\n        console.log(error.message);\n        alert(error.message);\n      }\n    };\n\n    _this.runQuery = function () {\n      if (_this.state.searchKey && _this.state.searchValue) {\n        var east = _this.state.mapBounds['_northEast'].lat;\n        var north = _this.state.mapBounds['_northEast'].lng;\n        var south = _this.state.mapBounds['_southWest'].lng;\n        var west = _this.state.mapBounds['_southWest'].lat;\n        var query = \"[out:json];\\n\\n      area[name=\\\"Germany\\\"]->.a;\\n\\n      (node(area.a)[\".concat(_this.state.searchKey, \"=\").concat(_this.state.searchValue, \"][\\\"name\\\"](\").concat(west, \",\").concat(south, \",\").concat(east, \",\").concat(north, \"););\\n\\n      out body;>;out skel qt;\");\n        var options = {\n          flatProperties: true,\n          overpassUrl: 'https://overpass-api.de/api/interpreter'\n        };\n        console.log(\"Query running\");\n        overpass(query, _this.dataHandler, options);\n      }\n    };\n\n    _this.onEachFeature = function (feature, layer) {\n      var popupContent = \"\".concat(feature.properties.name, \" <br>\");\n      var popupOptions = {\n        'maxWidtgh': '400',\n        'width': '200',\n        'className': 'popupCustom'\n      };\n      layer.bindPopup(popupContent, popupOptions);\n    };\n\n    _this.state = {\n      geojson: undefined,\n      searchKey: props.searchParams[0] || undefined,\n      searchValue: props.searchParams[1] || undefined,\n      mapBounds: props.mapBounds\n    };\n    return _this;\n  } // update props if there was a change\n\n\n  _createClass(Businesses, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this2 = this;\n\n      if (prevProps.searchParams[0] !== this.props.searchParams[0] || prevProps.searchParams[1] !== this.props.searchParams[1]) {\n        this.setState({\n          searchKey: this.props.searchParams[0],\n          searchValue: this.props.searchParams[1]\n        }, function () {\n          // need to clear the points on the map first\n          _this2.setState({\n            geojson: undefined\n          }, function () {\n            _this2.runQuery();\n          });\n        });\n      }\n\n      if (prevProps.mapBounds !== this.props.mapBounds) {\n        this.setState({\n          mapBounds: this.props.mapBounds\n        });\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.runQuery();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.state.geojson ? /*#__PURE__*/_jsxDEV(GeoJSON, {\n        data: this.state.geojson,\n        onEachFeature: this.onEachFeature\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 33\n      }, this) : null;\n    }\n  }]);\n\n  return Businesses;\n}(React.Component);\n\nexport { Businesses as default };","map":{"version":3,"sources":["/home/rwasser/setjetters/setjettersGIS/clients/src/components/Map/Layers/Businesses.js"],"names":["React","GeoJSON","overpass","require","Businesses","props","dataHandler","error","osmData","alert","features","length","undefined","setState","geojson","console","log","message","runQuery","state","searchKey","searchValue","east","mapBounds","lat","north","lng","south","west","query","options","flatProperties","overpassUrl","onEachFeature","feature","layer","popupContent","properties","name","popupOptions","bindPopup","searchParams","prevProps","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { GeoJSON } from 'react-leaflet';\n\nconst overpass = require('query-overpass');\n\nexport default class Businesses extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      geojson: undefined,\n      searchKey: props.searchParams[0] || undefined,\n      searchValue: props.searchParams[1] || undefined,\n      mapBounds: props.mapBounds,\n    };\n  }\n\n  // update props if there was a change\n  componentDidUpdate(prevProps) {\n    if (prevProps.searchParams[0] !== this.props.searchParams[0] || prevProps.searchParams[1] !== this.props.searchParams[1]) {\n      this.setState({ searchKey: this.props.searchParams[0], searchValue: this.props.searchParams[1] }, () => {\n        // need to clear the points on the map first\n        this.setState({ geojson: undefined }, () => {\n          this.runQuery();\n        });\n      });\n    }\n\n    if (prevProps.mapBounds !== this.props.mapBounds) {\n      this.setState({ mapBounds: this.props.mapBounds });\n    }\n  }\n\n  componentDidMount() {\n    this.runQuery();\n  }\n\n  dataHandler = (error, osmData) => {\n    alert(`${osmData.features.length} results returned`);\n    if (!error && osmData.features !== undefined) {\n      this.setState({ geojson: osmData });\n    }\n    if (error) {\n      console.log(error.message);\n      alert(error.message);\n    }\n  };\n\n  runQuery = () => {\n    if (this.state.searchKey && this.state.searchValue) {\n      const east = this.state.mapBounds['_northEast'].lat;\n      const north = this.state.mapBounds['_northEast'].lng;\n      const south = this.state.mapBounds['_southWest'].lng;\n      const west = this.state.mapBounds['_southWest'].lat;\n\n      const query = `[out:json];\\n\n      area[name=\"Germany\"]->.a;\\n\n      (node(area.a)[${this.state.searchKey}=${this.state.searchValue}][\"name\"](${west},${south},${east},${north}););\\n\n      out body;>;out skel qt;`;\n\n      const options = {\n        flatProperties: true,\n        overpassUrl: 'https://overpass-api.de/api/interpreter',\n      };\n      console.log(\"Query running\")\n      overpass(query, this.dataHandler, options);\n    }\n  }\n\n  onEachFeature = (feature, layer) => {\n    const popupContent = `${feature.properties.name} <br>`;\n    const popupOptions = {\n      'maxWidtgh': '400',\n      'width': '200',\n      'className': 'popupCustom'\n    };\n    layer.bindPopup(popupContent, popupOptions);\n  }\n\n  render() {\n    return this.state.geojson ? <GeoJSON data={this.state.geojson} onEachFeature={this.onEachFeature} /> : null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}